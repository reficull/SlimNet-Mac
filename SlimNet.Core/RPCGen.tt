<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>/*
 * SlimNet - Networking Middleware For Games
 * Copyright (C) 2011-2012 Fredrik Holmström
 * 
 * This notice may not be removed or altered.
 * 
 * This software is provided 'as-is', without any expressed or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software. 
 * 
 * Attribution
 * The origin of this software must not be misrepresented; you must not
 * claim that you wrote the original software. For any works using this 
 * software, reasonable acknowledgment is required.
 * 
 * Noncommercial
 * You may not use this software for commercial purposes.
 * 
 * Distribution
 * You are not allowed to distribute or make publicly available the software 
 * itself or its source code in original or modified form.
 */

/*
 * This file is auto-generated, do not edit.
 */

using System.Reflection;
using System.Collections.Generic;

namespace SlimNet 
{<#
  
System.Collections.Generic.List<string> typeNames
    = new System.Collections.Generic.List<string>(); 
    
for (int i = 0; i < 16; ++i)
for (int n = 0; n < 2; ++n)
{
    bool isFunc = n == 1;
    
    string types = "";
    string args = "";
    string suffix = isFunc ? "Func" : "Action";
    string returnType = isFunc ? "RPCResult<R>" : "void";
    string argsComma = "";
    string param = "";
    
    // Build generics list
    string[] typeArgs = (new int[i]).Select((_, t) => "T" + t).ToArray();
    string[] argsList = typeArgs.Select((x, t) => x + " a" + t).ToArray();

    if (isFunc)
    {
        typeArgs = typeArgs.Concat(new[] { "R" }).ToArray();
    }

    if (typeArgs.Length > 0)
    {
        types = "<" + String.Join(", ", typeArgs) + ">";
        typeNames.Add("RPC" + suffix + "<" + String.Join(",", new int[typeArgs.Length].Select(_ => "").ToArray()) + ">");   
    }
    else
    {
        typeNames.Add("RPC" + suffix);
    }

    args = String.Join(", ", argsList);
    param = String.Join(", ", argsList.Select((x, t) => "a" + t).ToArray());

    if (args.Length > 0)
    {
        argsComma = ", " + args;
    }

    if (param.Length > 0)
    {
        param = ", " + param;
    }
     
#>

	public class RPC<#=suffix + types #>
	{
		public string Name { get; private set; }
		public RPCDispatcher RPC { get; private set; }

		public RPC<#=suffix #>(RPCDispatcher rpc, string name)
		{
			Assert.NotNull(rpc, "rpc");
			Assert.NotNullOrEmpty(name, "name");

			RPC = rpc;
			Name = name;
		}
		<# if (isFunc) { #> 

		public RPCResult<R> InvokeOnServer(<#= args #>)
		{
			return InvokeOn(RPC.Context.Client.Player<#= param #>);
		}

		public RPCResult<R> InvokeOn(Player player<#= argsComma #>)
		{
			RPCResult<R> result = RPC.CreateResult<R>();
			
			RPC.Invoke(new[] { player }, result, Name<#= param #>);

			return result;
		}

		<# } else { #>

		public void Invoke(<#= args #>)
		{
			InvokeOn(RPC.Context.Client.Player<#= param #>);
		}
		
		public void InvokeOn(Player player<#= argsComma #>)
		{
			InvokeOn(new[] { player }<#= param #>);
		}
		
		public void InvokeOn(IEnumerable<Player> players<#= argsComma #>)
		{
			RPC.Invoke(players, null, Name<#= param #>);
		}

		<# } #> 
	}
<#
}
#>

	public partial class RPCDispatcher 
	{
		public List<FieldInfo> GetDispatcherFields() 
		{
			return Utils.TypeUtils2.GetFieldsWithTypes(
				BindingFlags.Public | BindingFlags.Static,
				<#=String.Join(",\r\n                ", typeNames.Select(x => "typeof(" + x + ")").ToArray()) #>
			);
		}
	}
}